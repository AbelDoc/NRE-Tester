<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Tester: /mnt/c/Users/abell/Documents/GitHub/NRE-Tester/src/Tester/TestSuite/NRE_TestSuite.hpp Source File</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="content" id="content">
                    <div class="container">
                        <div class="row">
                            <div class="col-sm-12 panel " style="padding-bottom: 15px;">
                                <div style="margin-bottom: 15px;">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.php">src</a></li><li class="navelem"><a class="el" href="dir_cd2a207beeaf887032d354dd35a22318.php">Tester</a></li><li class="navelem"><a class="el" href="dir_778e10535531d59d0ccd32ce3c6c513c.php">TestSuite</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">NRE_TestSuite.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_r_e___test_suite_8hpp.php">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">    #pragma once</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">    #include &lt;vector&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">    #include &lt;string&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">    #include &lt;sstream&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">    #include &lt;iostream&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">    #include &quot;../InternalTest/NRE_InternalTest.hpp&quot;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keyword">namespace </span><a class="code" href="namespace_n_r_e.php">NRE</a> {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keyword">namespace </span><a class="code" href="namespace_tester.php">Tester</a> {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_tester_1_1_test_suite.php">   34</a></span>&#160;            <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php">TestSuite</a> {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Fields</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                    std::vector&lt;InternalTest*&gt; suite;   </div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                    std::vector&lt;std::string&gt; failLogs;   </div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"></span>                    <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a529a5dc5bf235399345229f5d41539f6">addTest</a>(<a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php">InternalTest</a>* test);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                    <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a0e059fc8f1cb49a4bba283bb05fe2b64">addLog</a>(std::string <span class="keyword">const</span>&amp; log);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                    <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aae54422b099fc0bdb5ab24b924e0dff6">runAll</a>();</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                    <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a38fc3c6f7e8a83fd8163f57ad14b3a8d">hasFailed</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Static</span></div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">   60</a></span>&#160;                    <span class="keyword">static</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php">TestSuite</a> <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">suiteInstance</a>; </div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a467dfe222580814ff230c472b67ed07e">runAllTests</a>();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                    <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aab8f6475bda093850159149fafcf3dbb">suiteHasFailed</a>();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            };</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8cpp.php#a63e76f9d7558e4e3c6c54763d052c25a">fail</a>(std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;Fail&quot;</span>);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8cpp.php#a63e76f9d7558e4e3c6c54763d052c25a">fail</a>(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php">InternalTest</a>* test, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;Fail&quot;</span>);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8cpp.php#aaaab3d5003ae8973cde8dfbd4c4b5606">assertTrue</a>(<span class="keywordtype">bool</span> assert, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;True Assertion Failed&quot;</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8cpp.php#aaaab3d5003ae8973cde8dfbd4c4b5606">assertTrue</a>(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php">InternalTest</a>* test, <span class="keywordtype">bool</span> assert, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;True Assertion Failed&quot;</span>);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8cpp.php#ae5440257bb44972096426e2eaf6e2697">assertFalse</a>(<span class="keywordtype">bool</span> assert, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;False Assertion Failed&quot;</span>);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8cpp.php#ae5440257bb44972096426e2eaf6e2697">assertFalse</a>(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php">InternalTest</a>* test, <span class="keywordtype">bool</span> assert, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;False Assertion Failed&quot;</span>);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="_n_r_e___test_suite_8hpp.php#aa3484e0d85650d5358a08683bc8dd86c">  116</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8hpp.php#aa3484e0d85650d5358a08683bc8dd86c">assertEquals</a>(T <span class="keyword">const</span>&amp; lhs, T <span class="keyword">const</span>&amp; rhs, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;Equals Assertion Failed&quot;</span>) {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordflow">if</span> (!(lhs == rhs)) {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    std::stringstream lhsStr;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    std::stringstream rhsStr;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    lhsStr &lt;&lt; lhs;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    rhsStr &lt;&lt; rhs;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">TestSuite::suiteInstance</a>.<a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a0e059fc8f1cb49a4bba283bb05fe2b64">addLog</a>(message + <span class="stringliteral">&quot;\n\tExcepted : &quot;</span> + lhsStr.str() + <span class="stringliteral">&quot;\n\tGet : &quot;</span> + rhsStr.str());</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="_n_r_e___test_suite_8hpp.php#affa5117cfd8dec3faefedea1abcbe59c">  133</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8hpp.php#aa3484e0d85650d5358a08683bc8dd86c">assertEquals</a>(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php">InternalTest</a>* test, T <span class="keyword">const</span>&amp; lhs, T <span class="keyword">const</span>&amp; rhs, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;Equals Assertion Failed&quot;</span>) {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keywordflow">if</span> (!(lhs == rhs)) {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    std::stringstream lhsStr;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    std::stringstream rhsStr;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    lhsStr &lt;&lt; lhs;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    rhsStr &lt;&lt; rhs;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">TestSuite::suiteInstance</a>.<a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a0e059fc8f1cb49a4bba283bb05fe2b64">addLog</a>(message + test-&gt;<a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php#a2a0e1e8760903317b3e7bff3d30645db">getDetails</a>() + <span class="stringliteral">&quot;\n\tExcepted : &quot;</span> + lhsStr.str() + <span class="stringliteral">&quot;\n\tGet : &quot;</span> + rhsStr.str());</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="_n_r_e___test_suite_8hpp.php#a02fd0cbd3243bafdd8edad71dcfdbead">  149</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8hpp.php#a02fd0cbd3243bafdd8edad71dcfdbead">assertNotEquals</a>(T <span class="keyword">const</span>&amp; lhs, T <span class="keyword">const</span>&amp; rhs, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;NotEquals Assertion Failed&quot;</span>) {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keywordflow">if</span> (!(lhs != rhs)) {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    std::stringstream lhsStr;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    lhsStr &lt;&lt; lhs;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">TestSuite::suiteInstance</a>.<a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a0e059fc8f1cb49a4bba283bb05fe2b64">addLog</a>(message + <span class="stringliteral">&quot;\n\tExcepted : not &quot;</span> + lhsStr.str() + <span class="stringliteral">&quot;\n\tGet : &quot;</span> + lhsStr.str());</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="_n_r_e___test_suite_8hpp.php#a95c9447908241810e88d0a6c93b003ab">  164</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8hpp.php#a02fd0cbd3243bafdd8edad71dcfdbead">assertNotEquals</a>(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php">InternalTest</a>* test, T <span class="keyword">const</span>&amp; lhs, T <span class="keyword">const</span>&amp; rhs, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;NotEquals Assertion Failed&quot;</span>) {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                <span class="keywordflow">if</span> (!(lhs != rhs)) {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    std::stringstream lhsStr;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    lhsStr &lt;&lt; lhs;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">TestSuite::suiteInstance</a>.<a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a0e059fc8f1cb49a4bba283bb05fe2b64">addLog</a>(message + test-&gt;<a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php#a2a0e1e8760903317b3e7bff3d30645db">getDetails</a>() + <span class="stringliteral">&quot;\n\tExcepted : not &quot;</span> + lhsStr.str() + <span class="stringliteral">&quot;\n\tGet : &quot;</span> + lhsStr.str());</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="_n_r_e___test_suite_8hpp.php#a8a8f5b7081a86c51f3880aaba0394417">  178</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8hpp.php#a8a8f5b7081a86c51f3880aaba0394417">assertLesser</a>(T <span class="keyword">const</span>&amp; lhs, T <span class="keyword">const</span>&amp; rhs, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;Lesser Assertion Failed&quot;</span>) {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                <span class="keywordflow">if</span> (!(lhs &lt; rhs)) {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    std::stringstream lhsStr;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    std::stringstream rhsStr;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    lhsStr &lt;&lt; lhs;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    rhsStr &lt;&lt; rhs;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">TestSuite::suiteInstance</a>.<a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a0e059fc8f1cb49a4bba283bb05fe2b64">addLog</a>(message + <span class="stringliteral">&quot;\n\tExcepted : &lt; &quot;</span> + rhsStr.str() + <span class="stringliteral">&quot;\n\tGet : &quot;</span> + lhsStr.str());</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="_n_r_e___test_suite_8hpp.php#ac6ea7c4e970eabc1818ab2a6280e8dc3">  195</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8hpp.php#a8a8f5b7081a86c51f3880aaba0394417">assertLesser</a>(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php">InternalTest</a>* test, T <span class="keyword">const</span>&amp; lhs, T <span class="keyword">const</span>&amp; rhs, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;Lesser Assertion Failed&quot;</span>) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="keywordflow">if</span> (!(lhs &lt; rhs)) {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    std::stringstream lhsStr;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    std::stringstream rhsStr;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    lhsStr &lt;&lt; lhs;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    rhsStr &lt;&lt; rhs;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">TestSuite::suiteInstance</a>.<a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a0e059fc8f1cb49a4bba283bb05fe2b64">addLog</a>(message + test-&gt;<a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php#a2a0e1e8760903317b3e7bff3d30645db">getDetails</a>() + <span class="stringliteral">&quot;\n\tExcepted : &lt; &quot;</span> + rhsStr.str() + <span class="stringliteral">&quot;\n\tGet : &quot;</span> + lhsStr.str());</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="_n_r_e___test_suite_8hpp.php#a9f6e49ebdc68ba9fcb92f39457ca5bc1">  211</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8hpp.php#a9f6e49ebdc68ba9fcb92f39457ca5bc1">assertGreater</a>(T <span class="keyword">const</span>&amp; lhs, T <span class="keyword">const</span>&amp; rhs, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;Greater Assertion Failed&quot;</span>) {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <span class="keywordflow">if</span> (!(lhs &gt; rhs)) {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    std::stringstream lhsStr;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                    std::stringstream rhsStr;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    lhsStr &lt;&lt; lhs;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    rhsStr &lt;&lt; rhs;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                    <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">TestSuite::suiteInstance</a>.<a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a0e059fc8f1cb49a4bba283bb05fe2b64">addLog</a>(message + <span class="stringliteral">&quot;\n\tExcepted : &gt; &quot;</span> + rhsStr.str() + <span class="stringliteral">&quot;\n\tGet : &quot;</span> + lhsStr.str());</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="_n_r_e___test_suite_8hpp.php#af93b312721d301f407c6df053e5056db">  228</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8hpp.php#a9f6e49ebdc68ba9fcb92f39457ca5bc1">assertGreater</a>(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php">InternalTest</a>* test, T <span class="keyword">const</span>&amp; lhs, T <span class="keyword">const</span>&amp; rhs, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;Greater Assertion Failed&quot;</span>) {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                <span class="keywordflow">if</span> (!(lhs &gt; rhs)) {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    std::stringstream lhsStr;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    std::stringstream rhsStr;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                    lhsStr &lt;&lt; lhs;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    rhsStr &lt;&lt; rhs;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">TestSuite::suiteInstance</a>.<a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a0e059fc8f1cb49a4bba283bb05fe2b64">addLog</a>(message + test-&gt;<a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php#a2a0e1e8760903317b3e7bff3d30645db">getDetails</a>() + <span class="stringliteral">&quot;\n\tExcepted : &gt; &quot;</span> + rhsStr.str() + <span class="stringliteral">&quot;\n\tGet : &quot;</span> + lhsStr.str());</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00244"></a><span class="lineno"><a class="line" href="_n_r_e___test_suite_8hpp.php#a1f1e576b05ae9c3d1ebb80e064083a7d">  244</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8hpp.php#a1f1e576b05ae9c3d1ebb80e064083a7d">assertLesserOrEquals</a>(T <span class="keyword">const</span>&amp; lhs, T <span class="keyword">const</span>&amp; rhs, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;Lesser or Equals Assertion Failed&quot;</span>) {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                <span class="keywordflow">if</span> (!(lhs &lt;= rhs)) {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    std::stringstream lhsStr;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    std::stringstream rhsStr;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    lhsStr &lt;&lt; lhs;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                    rhsStr &lt;&lt; rhs;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">TestSuite::suiteInstance</a>.<a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a0e059fc8f1cb49a4bba283bb05fe2b64">addLog</a>(message + <span class="stringliteral">&quot;\n\tExcepted : &lt;= &quot;</span> + rhsStr.str() + <span class="stringliteral">&quot;\n\tGet : &quot;</span> + lhsStr.str());</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            }</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="_n_r_e___test_suite_8hpp.php#a7da975798b7df5c095dd009bf649f4e2">  261</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8hpp.php#a1f1e576b05ae9c3d1ebb80e064083a7d">assertLesserOrEquals</a>(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php">InternalTest</a>* test, T <span class="keyword">const</span>&amp; lhs, T <span class="keyword">const</span>&amp; rhs, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;Lesser or Equals Assertion Failed&quot;</span>) {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                <span class="keywordflow">if</span> (!(lhs &lt;= rhs)) {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                    std::stringstream lhsStr;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                    std::stringstream rhsStr;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    lhsStr &lt;&lt; lhs;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                    rhsStr &lt;&lt; rhs;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">TestSuite::suiteInstance</a>.<a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a0e059fc8f1cb49a4bba283bb05fe2b64">addLog</a>(message + test-&gt;<a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php#a2a0e1e8760903317b3e7bff3d30645db">getDetails</a>() + <span class="stringliteral">&quot;\n\tExcepted : &lt;= &quot;</span> + rhsStr.str() + <span class="stringliteral">&quot;\n\tGet : &quot;</span> + lhsStr.str());</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                }</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00277"></a><span class="lineno"><a class="line" href="_n_r_e___test_suite_8hpp.php#aa2ab4dea74bb39153c74a86af56986eb">  277</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8hpp.php#aa2ab4dea74bb39153c74a86af56986eb">assertGreaterOrEquals</a>(T <span class="keyword">const</span>&amp; lhs, T <span class="keyword">const</span>&amp; rhs, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;Greater or Equals Assertion Failed&quot;</span>) {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                <span class="keywordflow">if</span> (!(lhs &gt;= rhs)) {</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                    std::stringstream lhsStr;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    std::stringstream rhsStr;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                    lhsStr &lt;&lt; lhs;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    rhsStr &lt;&lt; rhs;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">TestSuite::suiteInstance</a>.<a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a0e059fc8f1cb49a4bba283bb05fe2b64">addLog</a>(message + <span class="stringliteral">&quot;\n\tExcepted : &gt;= &quot;</span> + rhsStr.str() + <span class="stringliteral">&quot;\n\tGet : &quot;</span> + lhsStr.str());</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                }</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            }</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00294"></a><span class="lineno"><a class="line" href="_n_r_e___test_suite_8hpp.php#a1759c7222980a84d23c12549d257c866">  294</a></span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8hpp.php#aa2ab4dea74bb39153c74a86af56986eb">assertGreaterOrEquals</a>(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php">InternalTest</a>* test, T <span class="keyword">const</span>&amp; lhs, T <span class="keyword">const</span>&amp; rhs, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;Greater or Equals Assertion Failed&quot;</span>) {</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                <span class="keywordflow">if</span> (!(lhs &gt;= rhs)) {</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                    std::stringstream lhsStr;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                    std::stringstream rhsStr;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                    lhsStr &lt;&lt; lhs;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                    rhsStr &lt;&lt; rhs;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                    <a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">TestSuite::suiteInstance</a>.<a class="code" href="class_n_r_e_1_1_tester_1_1_test_suite.php#a0e059fc8f1cb49a4bba283bb05fe2b64">addLog</a>(message + test-&gt;<a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php#a2a0e1e8760903317b3e7bff3d30645db">getDetails</a>() + <span class="stringliteral">&quot;\n\tExcepted : &gt;= &quot;</span> + rhsStr.str() + <span class="stringliteral">&quot;\n\tGet : &quot;</span> + lhsStr.str());</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8cpp.php#ac9d04ca34ccc93eec928557bec71311d">assertNull</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* ptr, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;Null Assertion Failed&quot;</span>);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordtype">void</span> assertNull(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php">InternalTest</a>* test, <span class="keyword">const</span> <span class="keywordtype">void</span>* ptr, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;Null Assertion Failed&quot;</span>);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="_n_r_e___test_suite_8cpp.php#a0eb6a3422e30c94c89f46c71fb680860">assertNotNull</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* ptr, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;NotNull Assertion Failed&quot;</span>);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keywordtype">void</span> assertNotNull(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_tester_1_1_internal_test.php">InternalTest</a>* test, <span class="keyword">const</span> <span class="keywordtype">void</span>* ptr, std::string <span class="keyword">const</span>&amp; message = <span class="stringliteral">&quot;NotNull Assertion Failed&quot;</span>);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        }</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    }</div><div class="ttc" id="_n_r_e___test_suite_8hpp_php_aa2ab4dea74bb39153c74a86af56986eb"><div class="ttname"><a href="_n_r_e___test_suite_8hpp.php#aa2ab4dea74bb39153c74a86af56986eb">NRE::Tester::assertGreaterOrEquals</a></div><div class="ttdeci">void assertGreaterOrEquals(T const &amp;lhs, T const &amp;rhs, std::string const &amp;message=&quot;Greater or Equals Assertion Failed&quot;)</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.hpp:277</div></div>
<div class="ttc" id="_n_r_e___test_suite_8cpp_php_aaaab3d5003ae8973cde8dfbd4c4b5606"><div class="ttname"><a href="_n_r_e___test_suite_8cpp.php#aaaab3d5003ae8973cde8dfbd4c4b5606">NRE::Tester::assertTrue</a></div><div class="ttdeci">void assertTrue(bool assert, std::string const &amp;message)</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.cpp:67</div></div>
<div class="ttc" id="class_n_r_e_1_1_tester_1_1_test_suite_php_a529a5dc5bf235399345229f5d41539f6"><div class="ttname"><a href="class_n_r_e_1_1_tester_1_1_test_suite.php#a529a5dc5bf235399345229f5d41539f6">NRE::Tester::TestSuite::addTest</a></div><div class="ttdeci">void addTest(InternalTest *test)</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.cpp:18</div></div>
<div class="ttc" id="namespace_tester_php"><div class="ttname"><a href="namespace_tester.php">Tester</a></div><div class="ttdoc">Tester&amp;#39;s API. </div></div>
<div class="ttc" id="class_n_r_e_1_1_tester_1_1_test_suite_php_aae54422b099fc0bdb5ab24b924e0dff6"><div class="ttname"><a href="class_n_r_e_1_1_tester_1_1_test_suite.php#aae54422b099fc0bdb5ab24b924e0dff6">NRE::Tester::TestSuite::runAll</a></div><div class="ttdeci">void runAll()</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.cpp:26</div></div>
<div class="ttc" id="class_n_r_e_1_1_tester_1_1_test_suite_php_a0e059fc8f1cb49a4bba283bb05fe2b64"><div class="ttname"><a href="class_n_r_e_1_1_tester_1_1_test_suite.php#a0e059fc8f1cb49a4bba283bb05fe2b64">NRE::Tester::TestSuite::addLog</a></div><div class="ttdeci">void addLog(std::string const &amp;log)</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.cpp:22</div></div>
<div class="ttc" id="class_n_r_e_1_1_tester_1_1_test_suite_php_a467dfe222580814ff230c472b67ed07e"><div class="ttname"><a href="class_n_r_e_1_1_tester_1_1_test_suite.php#a467dfe222580814ff230c472b67ed07e">NRE::Tester::TestSuite::runAllTests</a></div><div class="ttdeci">static void runAllTests()</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.cpp:51</div></div>
<div class="ttc" id="_n_r_e___test_suite_8hpp_php_a1f1e576b05ae9c3d1ebb80e064083a7d"><div class="ttname"><a href="_n_r_e___test_suite_8hpp.php#a1f1e576b05ae9c3d1ebb80e064083a7d">NRE::Tester::assertLesserOrEquals</a></div><div class="ttdeci">void assertLesserOrEquals(T const &amp;lhs, T const &amp;rhs, std::string const &amp;message=&quot;Lesser or Equals Assertion Failed&quot;)</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.hpp:244</div></div>
<div class="ttc" id="class_n_r_e_1_1_tester_1_1_test_suite_php_aec3b7f95f478c4369962b8c2735fd4f5"><div class="ttname"><a href="class_n_r_e_1_1_tester_1_1_test_suite.php#aec3b7f95f478c4369962b8c2735fd4f5">NRE::Tester::TestSuite::suiteInstance</a></div><div class="ttdeci">static TestSuite suiteInstance</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.hpp:60</div></div>
<div class="ttc" id="_n_r_e___test_suite_8hpp_php_a8a8f5b7081a86c51f3880aaba0394417"><div class="ttname"><a href="_n_r_e___test_suite_8hpp.php#a8a8f5b7081a86c51f3880aaba0394417">NRE::Tester::assertLesser</a></div><div class="ttdeci">void assertLesser(T const &amp;lhs, T const &amp;rhs, std::string const &amp;message=&quot;Lesser Assertion Failed&quot;)</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.hpp:178</div></div>
<div class="ttc" id="class_n_r_e_1_1_tester_1_1_test_suite_php_a38fc3c6f7e8a83fd8163f57ad14b3a8d"><div class="ttname"><a href="class_n_r_e_1_1_tester_1_1_test_suite.php#a38fc3c6f7e8a83fd8163f57ad14b3a8d">NRE::Tester::TestSuite::hasFailed</a></div><div class="ttdeci">bool hasFailed() const </div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.cpp:47</div></div>
<div class="ttc" id="_n_r_e___test_suite_8hpp_php_a9f6e49ebdc68ba9fcb92f39457ca5bc1"><div class="ttname"><a href="_n_r_e___test_suite_8hpp.php#a9f6e49ebdc68ba9fcb92f39457ca5bc1">NRE::Tester::assertGreater</a></div><div class="ttdeci">void assertGreater(T const &amp;lhs, T const &amp;rhs, std::string const &amp;message=&quot;Greater Assertion Failed&quot;)</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.hpp:211</div></div>
<div class="ttc" id="_n_r_e___test_suite_8cpp_php_a63e76f9d7558e4e3c6c54763d052c25a"><div class="ttname"><a href="_n_r_e___test_suite_8cpp.php#a63e76f9d7558e4e3c6c54763d052c25a">NRE::Tester::fail</a></div><div class="ttdeci">void fail(std::string const &amp;message)</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.cpp:59</div></div>
<div class="ttc" id="class_n_r_e_1_1_tester_1_1_internal_test_php"><div class="ttname"><a href="class_n_r_e_1_1_tester_1_1_internal_test.php">NRE::Tester::InternalTest</a></div><div class="ttdoc">Describe an internal test used to register a user test inside the suite. </div><div class="ttdef"><b>Definition:</b> NRE_InternalTest.hpp:28</div></div>
<div class="ttc" id="class_n_r_e_1_1_tester_1_1_test_suite_php"><div class="ttname"><a href="class_n_r_e_1_1_tester_1_1_test_suite.php">NRE::Tester::TestSuite</a></div><div class="ttdoc">Describe the test suite used to store all used-defined test and run them. </div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.hpp:34</div></div>
<div class="ttc" id="_n_r_e___test_suite_8cpp_php_a0eb6a3422e30c94c89f46c71fb680860"><div class="ttname"><a href="_n_r_e___test_suite_8cpp.php#a0eb6a3422e30c94c89f46c71fb680860">NRE::Tester::assertNotNull</a></div><div class="ttdeci">void assertNotNull(const void *ptr, std::string const &amp;message)</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.cpp:103</div></div>
<div class="ttc" id="_n_r_e___test_suite_8cpp_php_ae5440257bb44972096426e2eaf6e2697"><div class="ttname"><a href="_n_r_e___test_suite_8cpp.php#ae5440257bb44972096426e2eaf6e2697">NRE::Tester::assertFalse</a></div><div class="ttdeci">void assertFalse(bool assert, std::string const &amp;message)</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.cpp:79</div></div>
<div class="ttc" id="_n_r_e___test_suite_8cpp_php_ac9d04ca34ccc93eec928557bec71311d"><div class="ttname"><a href="_n_r_e___test_suite_8cpp.php#ac9d04ca34ccc93eec928557bec71311d">NRE::Tester::assertNull</a></div><div class="ttdeci">void assertNull(const void *ptr, std::string const &amp;message)</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.cpp:91</div></div>
<div class="ttc" id="class_n_r_e_1_1_tester_1_1_internal_test_php_a2a0e1e8760903317b3e7bff3d30645db"><div class="ttname"><a href="class_n_r_e_1_1_tester_1_1_internal_test.php#a2a0e1e8760903317b3e7bff3d30645db">NRE::Tester::InternalTest::getDetails</a></div><div class="ttdeci">std::string getDetails() const </div><div class="ttdef"><b>Definition:</b> NRE_InternalTest.cpp:28</div></div>
<div class="ttc" id="_n_r_e___test_suite_8hpp_php_aa3484e0d85650d5358a08683bc8dd86c"><div class="ttname"><a href="_n_r_e___test_suite_8hpp.php#aa3484e0d85650d5358a08683bc8dd86c">NRE::Tester::assertEquals</a></div><div class="ttdeci">void assertEquals(T const &amp;lhs, T const &amp;rhs, std::string const &amp;message=&quot;Equals Assertion Failed&quot;)</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.hpp:116</div></div>
<div class="ttc" id="namespace_n_r_e_php"><div class="ttname"><a href="namespace_n_r_e.php">NRE</a></div><div class="ttdoc">The NearlyRealEngine&amp;#39;s global namespace. </div><div class="ttdef"><b>Definition:</b> NRE_InternalTest.cpp:13</div></div>
<div class="ttc" id="_n_r_e___test_suite_8hpp_php_a02fd0cbd3243bafdd8edad71dcfdbead"><div class="ttname"><a href="_n_r_e___test_suite_8hpp.php#a02fd0cbd3243bafdd8edad71dcfdbead">NRE::Tester::assertNotEquals</a></div><div class="ttdeci">void assertNotEquals(T const &amp;lhs, T const &amp;rhs, std::string const &amp;message=&quot;NotEquals Assertion Failed&quot;)</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.hpp:149</div></div>
<div class="ttc" id="class_n_r_e_1_1_tester_1_1_test_suite_php_aab8f6475bda093850159149fafcf3dbb"><div class="ttname"><a href="class_n_r_e_1_1_tester_1_1_test_suite.php#aab8f6475bda093850159149fafcf3dbb">NRE::Tester::TestSuite::suiteHasFailed</a></div><div class="ttdeci">static bool suiteHasFailed()</div><div class="ttdef"><b>Definition:</b> NRE_TestSuite.cpp:55</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</div>
</div>
</body>
</html>
